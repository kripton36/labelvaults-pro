// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  phone     String?
  company   String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  country   String   @default("US")
  
  // Account status
  isEmailVerified Boolean @default(false)
  isActive        Boolean @default(true)
  role            Role    @default(USER)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  orders       Order[]
  transactions Transaction[]
  wallet       Wallet?
  uploadedFiles File[]
  supportTickets SupportTicket[]
  
  @@map("users")
}

model Wallet {
  id      String @id @default(cuid())
  userId  String @unique
  balance Float  @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("wallets")
}

model Transaction {
  id          String          @id @default(cuid())
  userId      String
  type        TransactionType
  amount      Float
  description String
  status      TransactionStatus @default(PENDING)
  
  // Payment details
  paymentMethod String?
  stripePaymentId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("transactions")
}

model Product {
  id          String @id @default(cuid())
  name        String
  description String
  category    ProductCategory
  basePrice   Float
  
  // Product specifications
  materials   String[] // Available materials
  finishes    String[] // Available finishes
  features    String[] // Key features
  
  // Pricing tiers
  minQuantity Int
  maxQuantity Int?
  
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  orderItems OrderItem[]
  
  @@map("products")
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  orderNumber String      @unique
  status      OrderStatus @default(PENDING)
  
  // Order details
  totalAmount    Float
  notes          String?
  specifications Json? // Custom specifications
  
  // Delivery details
  shippingAddress String?
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  files      File[]
  
  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  
  quantity     Int
  unitPrice    Float
  totalPrice   Float
  
  // Item specifications
  material     String
  finish       String?
  dimensions   String?
  customSpecs  Json?
  
  createdAt DateTime @default(now())
  
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

model File {
  id       String   @id @default(cuid())
  userId   String
  orderId  String?
  filename String
  originalName String
  mimeType String
  size     Int
  path     String
  
  createdAt DateTime @default(now())
  
  user  User   @relation(fields: [userId], references: [id])
  order Order? @relation(fields: [orderId], references: [id])
  
  @@map("files")
}

model SupportTicket {
  id       String              @id @default(cuid())
  userId   String
  subject  String
  message  String
  status   SupportTicketStatus @default(OPEN)
  priority TicketPriority     @default(NORMAL)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id])
  
  @@map("support_tickets")
}

// Enums
enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  ORDER_PAYMENT
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum ProductCategory {
  PRODUCT_LABELS
  SHIPPING_LABELS
  SECURITY_LABELS
  CUSTOM_LABELS
  INDUSTRIAL_LABELS
  ROLL_LABELS
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_DESIGN
  IN_PRODUCTION
  QUALITY_CHECK
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
}

enum SupportTicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}